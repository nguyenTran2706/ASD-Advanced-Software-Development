# Node.js full-stack pipeline using a Publish Profile (no service connection)
# Deploys to Azure App Service (Linux)

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  nodeVersion: '20.x'
  artifactZip: 'app.zip'

steps:
# ---------- Setup Node ----------
- task: NodeTool@0
  inputs:
    versionSpec: '$(nodeVersion)'
  displayName: 'Install Node.js'

# ---------- Install backend dependencies ----------
# (If your Node.js server is under /backend)
- script: |
    cd backend
    npm ci
  displayName: 'Install backend dependencies'

# ---------- Install test reporter (if you have Jest) ----------
# Remove if you don't have tests
- script: |
    cd backend
    npm install --no-save jest-junit
  displayName: 'Install jest-junit reporter'

# ---------- Run backend tests ----------
# Remove or modify if you have no tests
- script: |
    cd backend
    mkdir -p $(Build.SourcesDirectory)/test-results
    export JEST_JUNIT_OUTPUT=$(Build.SourcesDirectory)/test-results/junit.xml
    npx jest --ci --reporters=default --reporters=jest-junit || true
  displayName: 'Run backend tests (Jest â†’ JUnit)'

- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Build.SourcesDirectory)/test-results/*.xml'
  condition: succeededOrFailed()

# Stage exactly what you want to deploy
- script: |
    set -e
    rm -rf deploy-src
    mkdir -p deploy-src
    rsync -av --delete \
      --exclude '.git' \
      --exclude 'node_modules' \
      --exclude 'test' \
      --exclude 'coverage' \
      ./frontend/ ./backend/ ./Assets/ ./css/ \
      deploy-src/
  displayName: 'Stage files for deployment'

# Zip them into $(Build.ArtifactStagingDirectory)/app.zip
- task: ArchiveFiles@2
  displayName: 'Create deployment zip'
  inputs:
    rootFolderOrFile: 'deploy-src'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactZip)'
    replaceExistingArchive: true

# Download the secure publish profile first (unchanged)
- task: DownloadSecureFile@1
  name: fetchPublishProfile
  inputs:
    secureFile: 'MyHome.PublishSettings'

# Deploy via cURL to the Kudu ZipDeploy API
- script: |
    curl -X POST -u "$(KUDU_USERNAME):$(KUDU_PASSWORD)" \
      --data-binary "@$(Build.ArtifactStagingDirectory)/$(artifactZip)" \
      https://$(appName).scm.azurewebsites.net/api/zipdeploy
  displayName: 'Deploy to App Service using cURL'