# Node.js CI/CD pipeline using a Publish Profile for deployment
# -------------------------------------------------------------
# This version:
# 1) installs and tests Node.js
# 2) publishes Jest results to the Azure DevOps Tests tab
# 3) zips the app
# 4) deploys via a Publish Profile (no Service Connection required)

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  nodeVersion: '20.x'
  artifactZip: 'app.zip'

steps:
# ---------- Setup Node ----------
- task: NodeTool@0
  inputs:
    versionSpec: '$(nodeVersion)'
  displayName: 'Install Node.js'

# ---------- Install deps ----------
- script: npm ci
  displayName: 'Install dependencies'

# ---------- Install reporter for Jest test results ----------
- script: npm install --no-save jest-junit
  displayName: 'Install jest-junit reporter'

# ---------- Run tests and publish ----------
- script: |
    mkdir -p $(Build.SourcesDirectory)/test-results
    export JEST_JUNIT_OUTPUT=$(Build.SourcesDirectory)/test-results/junit.xml
    npx jest --ci --reporters=default --reporters=jest-junit
  displayName: 'Run unit tests (Jest â†’ JUnit)'

- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Build.SourcesDirectory)/test-results/*.xml'
    failTaskOnFailedTests: true
  condition: succeededOrFailed()

# ---------- Package app ----------
- script: |
    set -e
    rm -rf deploy-src
    mkdir -p deploy-src
    rsync -av --delete \
      --exclude '.git' \
      --exclude 'node_modules' \
      --exclude 'test' \
      --exclude 'coverage' \
      ./frontend/ ./backend/ ./Assets/ ./css/ \
      deploy-src/
  displayName: 'Stage files for deployment'

# Zip them into $(Build.ArtifactStagingDirectory)/app.zip
- task: ArchiveFiles@2
  displayName: 'Create deployment zip'
  inputs:
    rootFolderOrFile: 'deploy-src'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactZip)'
    replaceExistingArchive: true
    
# ---------- Download the secure publish profile ----------
- task: DownloadSecureFile@1
  name: fetchPublishProfile
  inputs:
    secureFile: 'MyHome.PublishSettings'

# ---------- Deploy to Azure App Service ----------
- task: AzureWebApp@1
  displayName: 'Deploy via Publish Profile (Zip Deploy)'
  inputs:
    appType: 'webAppLinux'
    appName: ''   # Leave blank; publishProfile contains the site name
    package: '$(Build.ArtifactStagingDirectory)/$(artifactZip)'
    publishProfile: '$(fetchPublishProfile.secureFilePath)'
