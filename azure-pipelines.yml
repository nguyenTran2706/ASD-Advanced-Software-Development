# Node.js → Test → Package → Deploy (Azure App Service Linux)

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  # ----- CHANGE THESE IF NEEDED -----
  azureServiceConnection: 'My-Azure-RM'   # Your Azure DevOps Service Connection (ARM)
  resourceGroup: 'my-rg'                  # Your Azure Resource Group
  webAppName: 'MyHome'                    # Your App Service name
  nodeVersion: '20.x'
  artifactZip: 'app.zip'

steps:
# ---------- Node + deps ----------
- task: NodeTool@0
  inputs:
    versionSpec: '$(nodeVersion)'
  displayName: 'Install Node.js'

- script: npm ci
  displayName: 'Install dependencies'

# Ensure jest-junit is available so tests show in the Tests tab
- script: npm install --no-save jest-junit
  displayName: 'Install jest-junit reporter'

# ---------- Tests (publish to Azure DevOps) ----------
- script: |
    mkdir -p $(Build.SourcesDirectory)/test-results
    export JEST_JUNIT_OUTPUT=$(Build.SourcesDirectory)/test-results/junit.xml
    npx jest --ci --reporters=default --reporters=jest-junit
  displayName: 'Run unit tests (Jest → JUnit)'

- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Build.SourcesDirectory)/test-results/*.xml'
    failTaskOnFailedTests: true
  condition: succeededOrFailed()

# ---------- Package for deploy (lean zip; exclude node_modules/tests/etc.) ----------
# Stage only deployable files into a temp folder
- task: CopyFiles@2
  displayName: 'Stage deployable files'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: |
      **/*
      !.git/**
      !.github/**
      !node_modules/**
      !coverage/**
      !test/**
      !**/*.test.*
      !**/*.spec.*
    TargetFolder: '$(Build.ArtifactStagingDirectory)/package'

# Zip the staged folder
- task: ArchiveFiles@2
  displayName: 'Create deployment zip'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/package'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(artifactZip)'
    replaceExistingArchive: true

# ---------- Configure App Service build settings (Oryx) ----------
# Ensures Azure builds your Node app on deploy and uses Node 20
- task: AzureCLI@2
  displayName: 'Configure App Service build settings'
  inputs:
    azureSubscription: '$(azureServiceConnection)'
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      az webapp config appsettings set \
        --resource-group "$(resourceGroup)" \
        --name "$(webAppName)" \
        --settings SCM_DO_BUILD_DURING_DEPLOYMENT=true WEBSITE_NODE_DEFAULT_VERSION=$(nodeVersion)
  condition: succeeded()   # only if earlier steps (incl. tests) succeeded

# ---------- Deploy to Azure App Service ----------
- task: AzureWebApp@1
  displayName: 'Deploy to Azure App Service (Linux)'
  inputs:
    azureSubscription: '$(azureServiceConnection)'
    appType: 'webAppLinux'
    appName: '$(webAppName)'
    package: '$(Build.ArtifactStagingDirectory)/$(artifactZip)'
  condition: succeeded()   # deploy only if tests passed
