# Node.js full-stack pipeline using a Publish Profile (no service connection)
# Deploys to Azure App Service (Linux)

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  nodeVersion: '20.x'
  artifactZip: 'app.zip'

steps:
# ---------- Setup Node ----------
- task: NodeTool@0
  inputs:
    versionSpec: '$(nodeVersion)'
  displayName: 'Install Node.js'

# ---------- Install backend dependencies ----------
# (If your Node.js server is under /backend)
- script: |
    cd backend
    npm ci
  displayName: 'Install backend dependencies'

# ---------- Install test reporter (if you have Jest) ----------
# Remove if you don't have tests
- script: |
    cd backend
    npm install --no-save jest-junit
  displayName: 'Install jest-junit reporter'

# ---------- Run backend tests ----------
# Remove or modify if you have no tests
- script: |
    cd backend
    mkdir -p $(Build.SourcesDirectory)/test-results
    export JEST_JUNIT_OUTPUT=$(Build.SourcesDirectory)/test-results/junit.xml
    npx jest --ci --reporters=default --reporters=jest-junit || true
  displayName: 'Run backend tests (Jest â†’ JUnit)'

- task: PublishTestResults@2
  displayName: 'Publish test results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Build.SourcesDirectory)/test-results/*.xml'
  condition: succeededOrFailed()

# ---------- Package for deployment ----------
# include backend + frontend + assets + css
- script: |
    mkdir -p deploy-src
    rsync -av --delete \
      --exclude '.git' \
      --exclude 'node_modules' \
      --exclude 'test' \
      --exclude 'coverage' \
      ./frontend ./backend ./Assets ./css ./deploy-src/ 2>/dev/null || true
    cd deploy-src
    zip -r ../$(Build.ArtifactStagingDirectory)/$(artifactZip) .
  displayName: 'Create deployment zip (frontend + backend)'

# ---------- Download secure publish profile ----------
- task: DownloadSecureFile@1
  name: fetchPublishProfile
  inputs:
    secureFile: 'MyHome.PublishSettings'
    
# ---------- Deploy to Azure ----------
- task: AzureRmWebAppDeployment@4
  displayName: 'Deploy via Publish Profile (Zip Deploy)'
  inputs:
    ConnectionType: 'PublishProfile'
    PublishProfilePath: '$(fetchPublishProfile.secureFilePath)'
    packageForLinux: '$(Build.ArtifactStagingDirectory)/$(artifactZip)'
    appType: 'webAppLinux'
    DeploymentType: 'zipDeploy'
